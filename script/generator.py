import platform
import os
import re

VERSION = '0.1'
TARGET_DIR = 'service'
PROTOBUF_DIR = 'protobuf/def'
PROTO_FILE = [
    'appearance',
    'player'
]

def pascal_case_to_camel_case(name):
    """Convert PascalCase to camelCase."""
    if not name:
        return name
    return name[0].lower() + name[1:]

def pascal_to_upper_snake(name: str) -> str:
    """Convert PascalCase to UPPER_SNAKE_CASE"""
    res = re.sub(r'(?<!^)([A-Z])', r'_\1', name)
    return res.upper()


if not os.path.exists(TARGET_DIR):
    os.makedirs(TARGET_DIR)
    print(f"Created directory: {TARGET_DIR}")

proto_list = []
name_set = []

for val in PROTO_FILE:
    path = os.path.join(PROTOBUF_DIR, val + '.proto')
    with open(path, 'r', encoding='utf-8') as file:
        package = {'list': [], 'src': path}
        
        in_message = False
        line = file.readline()

        while line:
            if line.startswith('}') and in_message:
                in_message = False

            line = line.strip()
            if line.startswith('package'):
                package['package'] = line[8:-1].strip()

            if line.startswith('message') and not in_message:
                in_message = True

                line = line.strip()
                line = line[8:-1].strip()

                if line in name_set:
                    raise f"{line} redefined."

                name_set.append(line)
                package['list'].append(line)
                    
            line = file.readline()

        proto_list.append(package)
        print(f"-- \t{file.name} have done")
    
with open(os.path.join(TARGET_DIR, 'ProtoType.gen.h'), 'w', encoding='utf-8') as file:
    file.write(f'''/**
 * Protocol ID define here by enum class
 * This file is generated by Python script. Do not edit!!!
 * Python version: v{platform.python_version()}
 * Script version: v{VERSION}
 */\n\n''')
    
    file.write('#pragma once\n\n')
    file.write('#include <cstdint>\n\n')

    file.write('namespace protocol {\n')
    file.write('\tenum class EProtoType : uint32_t {\n')

    package_index = 11
    proto_index = 1

    for package in proto_list:
        proto_index = 1
        file.write(f'\t\t// {package['package']}\n')
        file.write(f'\t\t// Source File: {package['src']}\n')

        for proto in package['list']:
            id = package_index * 100 + proto_index
            file.write(f'\t\t{pascal_to_upper_snake(proto)} = {id},\n')

            proto_index += 1

        file.write('\n')
        package_index += 1

    file.write('\t\tPROTO_TYPE_MAX,\n')
    file.write('\t}; // EProtoType\n')
    file.write('}\n')

with open(os.path.join(TARGET_DIR, 'proto_type.dart'), 'w', encoding='utf-8') as file:
    file.write('//\n')
    file.write('// Protocol ID define\n')
    file.write('// This file is generated by Python script. Do not edit!!!\n')
    file.write(f'// Python version: v{platform.python_version()}\n')
    file.write('//\n\n')

    file.write('enum ProtocolType {\n')

    package_index = 11
    proto_index = 1
    last_id = package_index * 100 + proto_index

    for package in proto_list:
        proto_index = 1
        file.write(f'\t// {package['package']}\n')
        file.write(f'\t// Source File: {package['src']}\n')

        for proto in package['list']:
            id = package_index * 100 + proto_index
            file.write(f'\t{pascal_case_to_camel_case(proto)}({id}, \"{proto}\"),\n')

            if id > last_id:
                last_id = id

            proto_index += 1

        file.write('\n')
        package_index += 1

    file.write(f'\tmaxProtoType({last_id + 1}, \"MaxType\");\n\n')

    file.write('\tfinal int id;\n')
    file.write('\tfinal String name;\n')
    file.write('\tconst ProtoType(this.id, this.name);\n')
    file.write('}\n')